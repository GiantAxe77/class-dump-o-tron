//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct DictionaryContainer;

struct HuffmanDecoder;

struct Input;

struct KeyboardLayout;

struct LanguageModel;

struct LanguageModelContext {
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field1;
    unsigned long long _field2;
};

struct PackedTrieSibling {
    union {
        unsigned int _field1;
        struct {
            unsigned int :24;
            unsigned int :2;
            unsigned int :2;
            unsigned int :1;
            unsigned int :1;
            unsigned int :1;
            unsigned int :1;
        } _field2;
        struct {
            unsigned int :8;
            unsigned int :8;
            unsigned int :8;
            unsigned int :8;
        } _field3;
    } _field1;
    union {
        unsigned long long _field1;
        struct {
            unsigned int :31;
            unsigned int :1;
            unsigned int :8;
        } _field2;
        struct {
            unsigned int :8;
            unsigned int :8;
            unsigned int :8;
            unsigned int :8;
            unsigned int :8;
        } _field3;
    } _field2;
    unsigned char _field3[4];
};

struct ReadOnlyDataFile;

struct RefPtr<KB::DictionaryContainer> {
    struct DictionaryContainer *_field1;
};

struct RefPtr<TI::Favonius::KeyboardLayout> {
    struct KeyboardLayout *_field1;
};

struct RefPtr<TI::Favonius::LayoutKey>;

struct SortKeyByteConverter {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2[256];
    _Bool _field3[256];
    struct unordered_map<KB::ByteString, unsigned int, std::__1::hash<KB::ByteString>, std::__1::equal_to<KB::ByteString>, std::__1::allocator<std::__1::pair<const KB::ByteString, unsigned int>>> _field4;
    unsigned int _field5;
};

struct String {
    unsigned short _field1;
    unsigned short _field2;
    unsigned short _field3;
    unsigned char _field4;
    char *_field5;
    char _field6[16];
};

struct StrokeBuildManager;

struct TIInputManagerZephyr {
    CDUnknownFunctionPointerType *_field1;
    struct vector<KB::Input, std::__1::allocator<KB::Input>> _field2;
    struct String _field3;
    struct String _field4;
    unsigned int _field5;
    unsigned int _field6;
    _Bool _field7;
    _Bool _field8;
    struct __CFString *_field9;
    struct __CFLocale *_field10;
    struct RefPtr<KB::DictionaryContainer> _field11;
    _Bool _field12;
    struct StrokeBuildManager *_field13;
    struct String _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    struct shared_ptr<KB::LanguageModel> _field19;
    struct Vector<WTF::RefPtr<TI::Favonius::LayoutKey>, 0> _field20;
    struct RefPtr<TI::Favonius::KeyboardLayout> _field21;
    struct String _field22;
    struct LanguageModelContext _field23;
    struct shared_ptr<KB::TypologyLogger> _field24;
};

struct TrieArrayCache<KB::PackedTrieSibling, const char *> {
    char *_field1;
    int _field2;
    unsigned char _field3[256];
    struct PackedTrieSibling _field4[256];
    unsigned int _field5;
    char *_field6;
    unsigned long long _field7;
};

struct TrieArrayCacheSet<KB::TrieArrayCache<KB::PackedTrieSibling, const char *>, const char *> {
    struct TrieArrayCache<KB::PackedTrieSibling, const char *> _field1;
    struct TrieArrayCache<KB::PackedTrieSibling, const char *> _field2;
};

struct TypologyLogger;

struct Vector<WTF::RefPtr<TI::Favonius::LayoutKey>, 0> {
    unsigned long long _field1;
    struct VectorBuffer<WTF::RefPtr<TI::Favonius::LayoutKey>, 0> _field2;
};

struct VectorBuffer<WTF::RefPtr<TI::Favonius::LayoutKey>, 0> {
    struct RefPtr<TI::Favonius::LayoutKey> *_field1;
    unsigned long long _field2;
};

struct WordTrie {
    struct ReadOnlyDataFile *_field1;
    struct ReadOnlyDataFile *_field2;
    unsigned int _field3;
    _Bool _field4;
    struct TrieArrayCacheSet<KB::TrieArrayCache<KB::PackedTrieSibling, const char *>, const char *> _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    float _field9;
    struct SortKeyByteConverter _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    struct unique_ptr<KB::HuffmanDecoder, std::__1::default_delete<KB::HuffmanDecoder>> _field14;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>;

struct __shared_weak_count;

struct shared_ptr<KB::LanguageModel> {
    struct LanguageModel *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<KB::TypologyLogger> {
    struct TypologyLogger *_field1;
    struct __shared_weak_count *_field2;
};

struct unique_ptr<KB::HuffmanDecoder, std::__1::default_delete<KB::HuffmanDecoder>> {
    struct __compressed_pair<KB::HuffmanDecoder *, std::__1::default_delete<KB::HuffmanDecoder>> {
        struct HuffmanDecoder *_field1;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_map<KB::ByteString, unsigned int, std::__1::hash<KB::ByteString>, std::__1::equal_to<KB::ByteString>, std::__1::allocator<std::__1::pair<const KB::ByteString, unsigned int>>> {
    struct __hash_table<std::__1::__hash_value_type<KB::ByteString, unsigned int>, std::__1::__unordered_map_hasher<KB::ByteString, std::__1::__hash_value_type<KB::ByteString, unsigned int>, std::__1::hash<KB::ByteString>, true>, std::__1::__unordered_map_equal<KB::ByteString, std::__1::__hash_value_type<KB::ByteString, unsigned int>, std::__1::equal_to<KB::ByteString>, true>, std::__1::allocator<std::__1::__hash_value_type<KB::ByteString, unsigned int>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<KB::ByteString, unsigned int>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<KB::ByteString, std::__1::__hash_value_type<KB::ByteString, unsigned int>, std::__1::hash<KB::ByteString>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<KB::ByteString, std::__1::__hash_value_type<KB::ByteString, unsigned int>, std::__1::equal_to<KB::ByteString>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<KB::Input, std::__1::allocator<KB::Input>> {
    struct Input *_field1;
    struct Input *_field2;
    struct __compressed_pair<KB::Input *, std::__1::allocator<KB::Input>> {
        struct Input *_field1;
    } _field3;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
};

