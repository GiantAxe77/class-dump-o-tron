//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class AVAudioDevice, NSDictionary, NSMutableArray, NSObject<OS_dispatch_queue>;

__attribute__((visibility("hidden")))
@interface AVAudioManager : NSObject
{
    int direction;
    int audioRefCount;
    int connectionRefCount;
    int internalBlockSize;
    int hardwareSampleRate;
    struct AudioStreamBasicDescription vpioFormat;
    _Bool usingFloat;
    _Bool isGKVoiceChat;
    _Bool isInMediaserverd;
    _Bool isMicrophoneMuted;
    _Bool enableSpeakerPhone;
    _Bool isUsingSuppression;
    _Bool isTetheredDisplayMode;
    int clientPID;
    NSDictionary *backMicSource;
    NSDictionary *frontMicSource;
    struct _opaque_pthread_mutex_t audioLock;
    NSObject<OS_dispatch_queue> *cmSessionQueue;
    NSObject<OS_dispatch_queue> *inputDeviceQueue;
    struct tagHANDLE *hAUIO;
    AVAudioDevice *targetInputDevice;
    int inferredOperatingMode;
    int inferredDeviceRole;
    unsigned int currentVPOperatingMode;
    _Bool currentAudioRecordingMode;
    int currentSampleRate;
    int currentMinSamplesPerFrame;
    _Bool currentReceiverStatus;
    int requestedVPOperatingMode;
    struct AudioEventQueue_t *eventQ;
    NSMutableArray *spkrConfList;
    NSMutableArray *micConfList;
    _Bool micInUse;
    _Bool spkrInUse;
}

+ (id)defaultAVAudioManager;
@property(readonly, nonatomic) int inferredOperatingMode; // @synthesize inferredOperatingMode;
@property(retain) AVAudioDevice *targetInputDevice; // @synthesize targetInputDevice;
@property(readonly, nonatomic) _Bool usingFloat; // @synthesize usingFloat;
@property(nonatomic) int clientPID; // @synthesize clientPID;
@property(nonatomic) _Bool isUsingSuppression; // @synthesize isUsingSuppression;
@property(nonatomic) _Bool isGKVoiceChat; // @synthesize isGKVoiceChat;
- (void)onCaptureSound:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 timeStampDelta:(int)arg5 bufferedSamples:(int)arg6 hostTime:(double)arg7 averagePower:(float)arg8 voiceActivity:(unsigned int)arg9;
- (void)onPlaySound:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 averagePower:(float)arg5;
- (_Bool)projectionModeEnabledState;
- (void)setBlockSize:(_Bool)arg1;
- (void)setupVPBlockFormat;
- (void)setSampleRate;
- (void)resetAudioSessionProperties;
- (void)setAudioSessionProperties;
- (_Bool)forceBufferFrames:(int *)arg1;
- (_Bool)forceSampleRate:(double *)arg1;
- (void)tearDownAudioSession:(unsigned long long)arg1 forceTearDown:(_Bool)arg2;
- (void)stopAudioSession:(unsigned long long)arg1;
- (unsigned long long)startAudioSessionWithCompletionHandler:(CDUnknownBlockType)arg1 dispatchQueue:(id)arg2;
- (void)setAudioSessionParameters:(id)arg1;
- (void)audioSessionClientDied:(int)arg1;
- (unsigned long long)setupAudioSession;
@property(nonatomic) _Bool isInMediaserverd;
- (void)setupAudioNotifications;
@property(getter=isSpeakerPhoneEnabled) _Bool enableSpeakerPhone;
- (void)enableMetering:(_Bool)arg1 isInputMeter:(_Bool)arg2;
- (void)setSamplesPerFrame:(int)arg1;
- (void)setMicrophoneMuted:(_Bool)arg1;
- (void)getVpioFormat:(struct AudioStreamBasicDescription *)arg1;
- (void)processEventQueue;
- (void)removeConference:(id)arg1;
- (void)addConference:(id)arg1;
- (unsigned int)vpOperationModeForConferenceOperatingMode:(int)arg1 deviceRole:(int)arg2;
- (void)internalSetRemoteBasebandCodecType:(id)arg1 sampleRate:(id)arg2;
- (void)setRemoteBasebandCodecType:(id)arg1 sampleRate:(id)arg2;
- (void)stopAudioIO;
- (void)tearDownAudioIO:(_Bool)arg1;
- (void)cleanupAUIOSetupWithResult:(int)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)startAudioIOWithFarEndVersionInfo:(struct VoiceIOFarEndVersionInfo *)arg1 minSamplesPerFrame:(int)arg2 internalFormat:(struct AudioStreamBasicDescription)arg3 allowAudioRecording:(_Bool)arg4 operatingMode:(int)arg5 deviceRole:(int)arg6 remoteBasebandCodecType:(id)arg7 remoteBasebandCodecSampleRate:(id)arg8 completionHandler:(CDUnknownBlockType)arg9;
- (void)AUIOTeardown:(_Bool)arg1;
- (void)AUIOSetup:(struct VoiceIOFarEndVersionInfo *)arg1 minSamplesPerFrame:(int)arg2 allowAudioRecording:(_Bool)arg3 ignoreRefCount:(_Bool)arg4 operatingMode:(int)arg5 deviceRole:(int)arg6 completionHandler:(CDUnknownBlockType)arg7;
- (void)setDirection:(int)arg1;
- (_Bool)setCurrentInputDevice:(id)arg1;
- (id)currentInputDevice;
- (id)init;

@end

