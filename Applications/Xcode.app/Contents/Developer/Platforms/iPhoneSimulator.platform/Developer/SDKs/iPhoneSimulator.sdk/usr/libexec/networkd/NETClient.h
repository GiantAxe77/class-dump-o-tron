//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NETLedBellyTap.h"
#import "NETWaldoClient.h"

@class NETWaldo, NSMutableSet, NSObject<OS_dispatch_source>, NSObject<OS_xpc_object>, NSString;

@interface NETClient : NSObject <NETWaldoClient, NETLedBellyTap>
{
    _Bool _watchingFallback;
    _Bool _suspended;
    _Bool _reachabilityAllowedInDarkWake;
    _Bool _inFastFallback;
    _Bool _cellularBlocked;
    _Bool _sleepAsserting;
    _Bool _waldoClient;
    int _pid;
    unsigned int _auditPort;
    unsigned int _bootstrap;
    unsigned int _powerAssertion;
    int _ccpTapFd;
    NSObject<OS_xpc_object> *_xname;
    NSObject<OS_xpc_object> *_uuid;
    NSObject<OS_xpc_object> *_bundle;
    NSObject<OS_xpc_object> *_connection;
    NSMutableSet *_endpoints;
    NSMutableSet *_sleepAssertEndpoints;
    unsigned long long _lastRequestTime;
    NSObject<OS_dispatch_source> *_idleTimer;
    NSObject<OS_dispatch_source> *_sleepAssertTimer;
    unsigned long long _transactionCount;
    NETWaldo *_waldo;
    NSMutableSet *_waldoWaiting;
    CDStruct_4c969caf _auditToken;
}

+ (int)evaluateTrustForCertificate:(id)arg1 subjectName:(id)arg2 queue:(id)arg3 completion:(CDUnknownBlockType)arg4;
+ (id)copyPublicKeyBitsFromEvaluatedSecTrust:(struct __SecTrust *)arg1;
+ (id)createSecCertificateArrayFromXPCCertificateChain:(id)arg1;
+ (id)getTrustEvaluationQueue;
+ (void)dumpClients;
+ (id)userEventAgentClient;
+ (id)clientForPID:(int)arg1;
+ (void)forEach:(CDUnknownBlockType)arg1;
+ (id)copyBundleForXPCConnection:(id)arg1 PID:(int)arg2;
+ (void)handleNew:(id)arg1;
@property int ccpTapFd; // @synthesize ccpTapFd=_ccpTapFd;
@property(retain) NSMutableSet *waldoWaiting; // @synthesize waldoWaiting=_waldoWaiting;
@property(retain) NETWaldo *waldo; // @synthesize waldo=_waldo;
@property unsigned int powerAssertion; // @synthesize powerAssertion=_powerAssertion;
@property unsigned long long transactionCount; // @synthesize transactionCount=_transactionCount;
@property(retain) NSObject<OS_dispatch_source> *sleepAssertTimer; // @synthesize sleepAssertTimer=_sleepAssertTimer;
@property(retain) NSObject<OS_dispatch_source> *idleTimer; // @synthesize idleTimer=_idleTimer;
@property unsigned long long lastRequestTime; // @synthesize lastRequestTime=_lastRequestTime;
@property unsigned int bootstrap; // @synthesize bootstrap=_bootstrap;
@property unsigned int auditPort; // @synthesize auditPort=_auditPort;
@property CDStruct_4c969caf auditToken; // @synthesize auditToken=_auditToken;
@property _Bool waldoClient; // @synthesize waldoClient=_waldoClient;
@property _Bool sleepAsserting; // @synthesize sleepAsserting=_sleepAsserting;
@property(retain) NSMutableSet *sleepAssertEndpoints; // @synthesize sleepAssertEndpoints=_sleepAssertEndpoints;
@property(retain) NSMutableSet *endpoints; // @synthesize endpoints=_endpoints;
@property(retain) NSObject<OS_xpc_object> *connection; // @synthesize connection=_connection;
@property _Bool cellularBlocked; // @synthesize cellularBlocked=_cellularBlocked;
@property _Bool inFastFallback; // @synthesize inFastFallback=_inFastFallback;
@property _Bool reachabilityAllowedInDarkWake; // @synthesize reachabilityAllowedInDarkWake=_reachabilityAllowedInDarkWake;
@property(retain) NSObject<OS_xpc_object> *bundle; // @synthesize bundle=_bundle;
@property(retain) NSObject<OS_xpc_object> *uuid; // @synthesize uuid=_uuid;
@property(retain) NSObject<OS_xpc_object> *xname; // @synthesize xname=_xname;
@property int pid; // @synthesize pid=_pid;
- (void).cxx_destruct;
@property _Bool suspended;
- (void)transactionEnd;
- (void)transactionBegin;
- (_Bool)hasEntitlement:(const char *)arg1;
- (void)respondToRequest:(id)arg1 withDictionary:(id)arg2;
- (void)respondToRequest:(id)arg1 response:(unsigned long long)arg2 ifindex:(int)arg3 delay:(long long)arg4;
- (void)respondToRequest:(id)arg1 withError:(unsigned long long)arg2;
- (void)sendMessage:(id)arg1 withDelay:(long long)arg2;
- (void)sendMessage:(id)arg1;
- (void)sendMessage:(id)arg1 replyHandler:(CDUnknownBlockType)arg2;
- (void)reportCellBlocked;
- (void)getAuditToken:(CDStruct_4c969caf *)arg1 auditPort:(unsigned int *)arg2 bootstrapPort:(unsigned int *)arg3;
@property _Bool watchingFallback;
@property(readonly, nonatomic) const char *name;
- (void)removeSleepAssertEndpoint:(id)arg1;
- (void)addSleepAssertEndpoint:(id)arg1;
- (void)removeEndpoint:(id)arg1;
- (void)addEndpoint:(id)arg1;
- (id)endpointForID:(unsigned long long)arg1;
@property(readonly, copy) NSString *description;
- (id)initWithConnection:(id)arg1;
- (id)init;
- (void)handleRequest:(id)arg1;
- (void)handleFetchCCPTap:(id)arg1;
- (void)handleCopyWaldo:(id)arg1;
- (void)handleMessageVerifyPeerCertificateAndCopyPublicKey:(id)arg1;
- (void)handleUUIDForBundleID:(id)arg1;
- (void)handleNotifyCellBlocked:(id)arg1;
- (void)handleCheckout:(id)arg1;
- (void)handleUserEventAgentUnmap:(id)arg1;
- (void)handleUserEventAgentMap:(id)arg1;
- (void)handleUserEventAgentCheckIn:(id)arg1;
- (void)handleSetPoolLimit:(id)arg1;
- (void)handleSetPersistentInterface:(id)arg1;
- (void)handleSetExpensive:(id)arg1;
- (void)handleIsExpensive:(id)arg1;
- (void)handleIsCellular:(id)arg1;
- (void)handleConnectionStart:(id)arg1;
- (void)handleOpportunisticDisable:(id)arg1;
- (void)sendSettings;
- (void)handleLedbelly:(id)arg1 clientRemoved:(id)arg2;
- (void)handleLedbelly:(id)arg1 clientAdded:(id)arg2;
- (void)handleLedbelly:(id)arg1 clientAddedOrRemoved:(id)arg2 message:(unsigned char)arg3;
- (void)handleLedbelly:(id)arg1 outboundMessage:(id)arg2 from:(id)arg3;
- (void)handleLedbelly:(id)arg1 inboundHeader:(id)arg2 payload:(id)arg3 to:(id)arg4;
- (void)handleLedbelly:(id)arg1 newState:(unsigned char)arg2;
- (void)ledbellyTapTx:(struct iovec *)arg1 count:(int)arg2;
- (void)didReceiveWaldo:(id)arg1;
- (void)disableSleepAssert;
- (void)enableSleepAssert;
- (void)handleRemove;
- (void)handleTapClose;
- (id)copyEntitlement:(const char *)arg1;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

