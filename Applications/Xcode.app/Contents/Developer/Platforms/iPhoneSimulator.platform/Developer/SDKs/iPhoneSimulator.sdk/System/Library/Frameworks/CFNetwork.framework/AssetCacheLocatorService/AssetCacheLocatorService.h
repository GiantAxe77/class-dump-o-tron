//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSArray, NSDate, NSMutableData, NSMutableDictionary, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_semaphore>, NSObject<OS_dispatch_source>, NSObject<OS_xpc_object>, NSOperationQueue, NSString, NSURL, NSURLConnection;

__attribute__((visibility("hidden")))
@interface AssetCacheLocatorService : NSObject
{
    _Bool _useAssetLocator;
    _Bool _skipEVCheck;
    _Bool _initialized;
    _Bool _diskCacheRefreshTimerResumed;
    _Bool _locateServerValidated;
    int _logLevel;
    int _concurrentDNSResolutions;
    unsigned int _singleLocateTag;
    unsigned int _locateTag;
    double _locateTimeout;
    double _dnsResolutionTimeout;
    NSURL *_locateURL;
    NSString *_userCachePath;
    NSString *_userTempPath;
    NSString *_cacheDirPath;
    NSString *_diskCachePlistPath;
    NSArray *_localhostAddresses;
    NSArray *_softwareVersions;
    NSDate *_bootTime;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_xpc_object> *_listenerConnection;
    NSMutableDictionary *_diskCache;
    NSObject<OS_dispatch_source> *_diskCacheRefreshTimer;
    NSObject<OS_dispatch_semaphore> *_singleLocate;
    NSOperationQueue *_locateOpQueue;
    NSArray *_localAddresses;
    NSArray *_gatewayIdentifiers;
    CDUnknownBlockType _locateCallback;
    NSObject<OS_dispatch_queue> *_locateCallbackQueue;
    NSURLConnection *_locateConnection;
    unsigned long long _locateResponseCode;
    NSMutableData *_locateResponseData;
}

@property(retain) NSMutableData *locateResponseData; // @synthesize locateResponseData=_locateResponseData;
@property unsigned long long locateResponseCode; // @synthesize locateResponseCode=_locateResponseCode;
@property _Bool locateServerValidated; // @synthesize locateServerValidated=_locateServerValidated;
@property(retain) NSURLConnection *locateConnection; // @synthesize locateConnection=_locateConnection;
@property(retain) NSObject<OS_dispatch_queue> *locateCallbackQueue; // @synthesize locateCallbackQueue=_locateCallbackQueue;
@property(copy) CDUnknownBlockType locateCallback; // @synthesize locateCallback=_locateCallback;
@property unsigned int locateTag; // @synthesize locateTag=_locateTag;
@property(retain) NSArray *gatewayIdentifiers; // @synthesize gatewayIdentifiers=_gatewayIdentifiers;
@property(retain) NSArray *localAddresses; // @synthesize localAddresses=_localAddresses;
@property(retain) NSOperationQueue *locateOpQueue; // @synthesize locateOpQueue=_locateOpQueue;
@property unsigned int singleLocateTag; // @synthesize singleLocateTag=_singleLocateTag;
@property(retain) NSObject<OS_dispatch_semaphore> *singleLocate; // @synthesize singleLocate=_singleLocate;
@property _Bool diskCacheRefreshTimerResumed; // @synthesize diskCacheRefreshTimerResumed=_diskCacheRefreshTimerResumed;
@property(retain) NSObject<OS_dispatch_source> *diskCacheRefreshTimer; // @synthesize diskCacheRefreshTimer=_diskCacheRefreshTimer;
@property(retain) NSMutableDictionary *diskCache; // @synthesize diskCache=_diskCache;
@property(retain) NSObject<OS_xpc_object> *listenerConnection; // @synthesize listenerConnection=_listenerConnection;
@property(retain) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property _Bool initialized; // @synthesize initialized=_initialized;
@property(retain) NSDate *bootTime; // @synthesize bootTime=_bootTime;
@property(retain) NSArray *softwareVersions; // @synthesize softwareVersions=_softwareVersions;
@property(retain) NSArray *localhostAddresses; // @synthesize localhostAddresses=_localhostAddresses;
@property(retain) NSString *diskCachePlistPath; // @synthesize diskCachePlistPath=_diskCachePlistPath;
@property(retain) NSString *cacheDirPath; // @synthesize cacheDirPath=_cacheDirPath;
@property(retain) NSString *userTempPath; // @synthesize userTempPath=_userTempPath;
@property(retain) NSString *userCachePath; // @synthesize userCachePath=_userCachePath;
@property _Bool skipEVCheck; // @synthesize skipEVCheck=_skipEVCheck;
@property(retain) NSURL *locateURL; // @synthesize locateURL=_locateURL;
@property double dnsResolutionTimeout; // @synthesize dnsResolutionTimeout=_dnsResolutionTimeout;
@property double locateTimeout; // @synthesize locateTimeout=_locateTimeout;
@property int concurrentDNSResolutions; // @synthesize concurrentDNSResolutions=_concurrentDNSResolutions;
@property _Bool useAssetLocator; // @synthesize useAssetLocator=_useAssetLocator;
@property int logLevel; // @synthesize logLevel=_logLevel;
- (void).cxx_destruct;
- (void)connectionDidFinishLoading:(id)arg1;
- (id)connection:(id)arg1 willCacheResponse:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)connection:(id)arg1 willSendRequestForAuthenticationChallenge:(id)arg2;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)locateCachingServerWithTimeout:(double)arg1 callback:(CDUnknownBlockType)arg2 callbackQueue:(id)arg3 tag:(unsigned int)arg4;
- (void)locateLocalCachingServersWithTimeout:(double)arg1 localAddresses:(id)arg2 gatewayIdentifiers:(id)arg3 configurationProfiles:(id)arg4 callback:(CDUnknownBlockType)arg5 callbackQueue:(id)arg6 tag:(unsigned int)arg7;
- (_Bool)parseLocateResponse:(id)arg1 intoServers:(id *)arg2 validityInterval:(double *)arg3 error:(id *)arg4 tag:(unsigned int)arg5;
- (void)locateLocalCachingServersWithHeaders:(id)arg1 body:(id)arg2 timeout:(double)arg3 callback:(CDUnknownBlockType)arg4 callbackQueue:(id)arg5 tag:(unsigned int)arg6;
- (void)locateLocalhostCachingServerWithTimeout:(double)arg1 callback:(CDUnknownBlockType)arg2 callbackQueue:(id)arg3 tag:(unsigned int)arg4;
- (void)uncacheDNSPublicAddressRangesForNetworkIdentifiers:(id)arg1 tag:(unsigned int)arg2;
- (void)cacheDNSPublicAddressRanges:(id)arg1 forNetworkIdentifiers:(id)arg2 validityInterval:(double)arg3 tag:(unsigned int)arg4;
- (id)cachedDNSPublicAddressRangesForNetworkIdentifiers:(id)arg1 tag:(unsigned int)arg2;
- (void)uncacheAllServersWithTag:(unsigned int)arg1;
- (_Bool)anyCachedServersWithTag:(unsigned int)arg1;
- (void)uncacheServersForNetworkIdentifiers:(id)arg1 tag:(unsigned int)arg2;
- (void)cacheServers:(id)arg1 forNetworkIdentifiers:(id)arg2 validityInterval:(double)arg3 tag:(unsigned int)arg4;
- (id)cachedServersForNetworkIdentifiers:(id)arg1 tag:(unsigned int)arg2;
- (void)updateDiskCacheRefreshTimerWithTag:(unsigned int)arg1;
- (void)saveDiskCacheWithTag:(unsigned int)arg1;
- (void)loadDiskCacheWithTag:(unsigned int)arg1;
- (id)makeBootTimeWithTag:(unsigned int)arg1;
- (id)sanitizeRanges:(id)arg1 fromSource:(id)arg2 tag:(unsigned int)arg3;
- (void)resolveDNSPublicAddressRangesWithTimeout:(double)arg1 callback:(CDUnknownBlockType)arg2 callbackQueue:(id)arg3 tag:(unsigned int)arg4;
- (void)resolveDNSPublicAddressRangesFromRecordNamed:(id)arg1 errorIfNotFound:(_Bool)arg2 callback:(CDUnknownBlockType)arg3 callbackQueue:(id)arg4 tag:(unsigned int)arg5;
- (id)makeRangesFromDNSRecordNamed:(id)arg1 withType:(int)arg2 data:(const char *)arg3 length:(unsigned long long)arg4 more:(_Bool *)arg5 error:(id *)arg6 tag:(unsigned int)arg7;
- (id)safeString:(const char *)arg1 length:(unsigned long long)arg2 forceHex:(_Bool)arg3;
- (_Bool)makeLocalAddresses:(id *)arg1 andGatewayIdentifiers:(id *)arg2 tag:(unsigned int)arg3;
- (id)stringFromSockaddrStorage:(const struct sockaddr_storage *)arg1;
- (id)stringFromSockaddrDL:(const struct sockaddr_dl *)arg1;
- (id)stringFromSockaddr6:(const struct sockaddr_in6 *)arg1;
- (id)stringFromSockaddr4:(const struct sockaddr_in *)arg1;
- (id)identifierFromMacAddr:(char *)arg1 tag:(unsigned int)arg2;
- (id)stringFromMacAddr:(char *)arg1;
- (id)stringFromInaddr6:(const struct in6_addr *)arg1;
- (id)stringFromInaddr4:(const struct in_addr *)arg1;
- (_Bool)isUsefulSockaddr6:(const struct sockaddr_in6 *)arg1;
- (_Bool)isUsefulSockaddr4:(const struct sockaddr_in *)arg1;
- (_Bool)isUsefulInaddr6:(const struct in6_addr *)arg1;
- (_Bool)isUsefulInaddr4:(const struct in_addr *)arg1;
- (void)watchForNetworkChanges;
- (void)networkChanged;
- (id)makeSoftwareVersions;
- (void)logWithTag:(unsigned int)arg1 level:(int)arg2 format:(id)arg3;
- (int)logLevelByName:(id)arg1;
- (_Bool)handleLocateEvent:(id)arg1 forConnection:(id)arg2 tag:(unsigned int)arg3;
- (_Bool)handleEvent:(id)arg1 forConnection:(id)arg2;
- (void)handleConnection:(id)arg1;
- (void)start;
- (id)errorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 tag:(unsigned int)arg4;
- (_Bool)amRunningInMySingleLocate:(unsigned int)arg1;
- (_Bool)amRunningOnMyQueue;
- (_Bool)sandbox;
- (id)init;

@end

