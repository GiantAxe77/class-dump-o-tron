//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class GKDispatchGroup, GKFairPlaySAPSession, NSData, NSDate, NSDictionary, NSError, NSObject<OS_dispatch_queue>, NSSet, NSURL;

@interface GKStoreBag : NSObject
{
    NSObject<OS_dispatch_queue> *_syncQueue;
    GKDispatchGroup *_fetchGroup;
    int _playerIDHashMod;
    int _playerIDHashAdd;
    NSURL *_url;
    NSError *_error;
    GKFairPlaySAPSession *_SAPSession;
    NSSet *_APNSRequired;
    NSSet *_signatureRequired;
    NSSet *_responseSignatureRequired;
    NSData *_mockSAPSign;
    NSDictionary *_internalBag;
    NSDate *_expiration;
}

+ (id)mockSignURLForEnvironment:(long long)arg1;
+ (id)storeBagURLForEnvironment:(long long)arg1;
+ (id)storeBagForURL:(id)arg1;
+ (id)storeBagForEnvironment:(long long)arg1;
@property(retain, nonatomic) NSDate *expiration; // @synthesize expiration=_expiration;
@property(retain, nonatomic) NSDictionary *internalBag; // @synthesize internalBag=_internalBag;
@property(retain) NSData *mockSAPSign; // @synthesize mockSAPSign=_mockSAPSign;
@property(retain) NSSet *responseSignatureRequired; // @synthesize responseSignatureRequired=_responseSignatureRequired;
@property(retain) NSSet *signatureRequired; // @synthesize signatureRequired=_signatureRequired;
@property(retain) NSSet *APNSRequired; // @synthesize APNSRequired=_APNSRequired;
@property(retain) GKFairPlaySAPSession *SAPSession; // @synthesize SAPSession=_SAPSession;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) NSURL *url; // @synthesize url=_url;
- (void)readDataForURL:(id)arg1 postData:(id)arg2 client:(id)arg3 includeUDID:(_Bool)arg4 includeAPNS:(_Bool)arg5 completion:(CDUnknownBlockType)arg6;
- (void)readDataForBagKey:(id)arg1 method:(id)arg2 postData:(id)arg3 client:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)writeDataForBagKey:(id)arg1 postData:(id)arg2 client:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)_loadDataForBagKey:(id)arg1 method:(id)arg2 postData:(id)arg3 client:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (id)_networkSynchonizationQueue;
- (_Bool)isLoadValidForBagKey:(id)arg1 date:(id)arg2;
- (void)invalidateBagKeys:(id)arg1;
- (id)_bagKeyValidationDict;
- (void)_sendAsynchronousRequest:(id)arg1 responseMustBeSigned:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (id)_requestWithURL:(id)arg1 method:(id)arg2 playerID:(id)arg3 authToken:(id)arg4 pushToken:(id)arg5 client:(id)arg6 postData:(id)arg7 includeUDID:(_Bool)arg8 includeAPNS:(_Bool)arg9 sapSession:(id)arg10;
- (int)hashForPlayerID:(id)arg1;
- (void)_updatePlayerIDHashParameters;
- (void)updateURLPatternCache;
- (void)_setupSAPSession:(id)arg1 group:(id)arg2 retries:(long long)arg3;
- (void)_setupSAPSessionWithRetries:(id)arg1;
- (struct __SecTrust *)_createTrustForCertificates:(id)arg1 host:(id)arg2;
- (id)_storeBagForData:(id)arg1 error:(id *)arg2;
- (_Bool)_checkData:(id)arg1 againstSignature:(id)arg2 withTrust:(struct __SecTrust *)arg3;
- (_Bool)_shouldUseHTTPPipelining;
- (_Bool)shouldUseHTTPPipelining;
- (id)omnitureQueryParametersForContext:(id)arg1;
- (id)valueForUndefinedKey:(id)arg1;
- (void)getCurrentPlayerID:(CDUnknownBlockType)arg1;
- (void)getValuesForKeys:(id)arg1 queue:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)getURLForKey:(id)arg1 queue:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)_setupResponseSignatureRequired:(id)arg1;
- (void)_setupSignatureRequired:(id)arg1;
- (void)_setupAPNSRequired:(id)arg1;
- (void)getBagWithHandler:(CDUnknownBlockType)arg1;
- (void)_fetchBagWithHandler:(CDUnknownBlockType)arg1;
- (void)_fetchFromServerWithHandler:(CDUnknownBlockType)arg1;
- (void)_fetchFromCacheWithHandler:(CDUnknownBlockType)arg1;
- (_Bool)_isLastProtocolVersionUsedValid;
- (_Bool)_isFetching;
- (_Bool)_isValidAndNotExpired;
- (_Bool)_isValid;
- (_Bool)_isExpired;
- (void)dealloc;
- (id)initWithURL:(id)arg1;
- (id)description;
- (void)performAsync:(CDUnknownBlockType)arg1;
- (void)performSync:(CDUnknownBlockType)arg1;

@end

