//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct DKDAAPElementCore;

struct ML3ImportSession {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    id _field4;
    int _field5;
    CDUnknownFunctionPointerType _field6;
    void *_field7;
    id _field8;
    id _field9;
    id _field10;
    struct {
        unsigned int _field1;
        unsigned int _field2;
        unsigned int _field3;
        double _field4;
    } _field11;
    struct vector<std::__1::shared_ptr<ML3DatabaseImportDataSource>, std::__1::allocator<std::__1::shared_ptr<ML3DatabaseImportDataSource>>> _field12;
    struct unordered_map<long long, ML3CollectionPIDSet, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, ML3CollectionPIDSet>>> _field13;
    struct unordered_map<unsigned int, long long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, long long>>> _field14;
    struct unordered_map<unsigned int, bool, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, bool>>> _field15;
    struct vector<long long, std::__1::allocator<long long>> _field16;
    struct unordered_set<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long>> _field17;
    id _field18;
    id _field19;
    id _field20;
    id _field21;
    id _field22;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field23;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field24;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field25;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field26;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field27;
    _Bool _field28;
    _Bool _field29;
    _Bool _field30;
    struct vector<std::__1::shared_ptr<ML3ImportItem>, std::__1::allocator<std::__1::shared_ptr<ML3ImportItem>>> _field31;
};

struct MLDDAAPImportItem;

struct __hash_node<long long, void *>;

struct __hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>;

struct __shared_weak_count;

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[23];
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct shared_ptr<DKDAAPElementCore> {
    struct DKDAAPElementCore *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ML3DatabaseImportDataSource>;

struct shared_ptr<ML3ImportItem>;

struct shared_ptr<MLDDAAPImportItem> {
    struct MLDDAAPImportItem *_field1;
    struct __shared_weak_count *_field2;
};

struct unique_ptr<std::__1::__hash_node<long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<long long, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>>> {
        struct __hash_node<long long, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<long long, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_map<long long, ML3CollectionPIDSet, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, ML3CollectionPIDSet>>> {
    struct __hash_table<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, std::__1::hash<long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, ML3CollectionPIDSet>, std::__1::equal_to<long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned int, bool, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, bool>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, bool>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, bool>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, bool>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, bool>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned int, bool>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, bool>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, bool>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned int, long long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, long long>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, long long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, long long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, long long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, long long>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned int, long long>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, long long>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, long long>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long>> {
    struct __hash_table<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long>> {
        struct unique_ptr<std::__1::__hash_node<long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long long, void *>*>, std::__1::allocator<std::__1::__hash_node<long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<long long, void *>*> {
                struct __hash_node<long long, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<long long>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<long long>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<long long, std::__1::allocator<long long>> {
    long long *_field1;
    long long *_field2;
    struct __compressed_pair<long long *, std::__1::allocator<long long>> {
        long long *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<ML3DatabaseImportDataSource>, std::__1::allocator<std::__1::shared_ptr<ML3DatabaseImportDataSource>>> {
    struct shared_ptr<ML3DatabaseImportDataSource> *_field1;
    struct shared_ptr<ML3DatabaseImportDataSource> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ML3DatabaseImportDataSource>*, std::__1::allocator<std::__1::shared_ptr<ML3DatabaseImportDataSource>>> {
        struct shared_ptr<ML3DatabaseImportDataSource> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<ML3ImportItem>, std::__1::allocator<std::__1::shared_ptr<ML3ImportItem>>> {
    struct shared_ptr<ML3ImportItem> *_field1;
    struct shared_ptr<ML3ImportItem> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ML3ImportItem>*, std::__1::allocator<std::__1::shared_ptr<ML3ImportItem>>> {
        struct shared_ptr<ML3ImportItem> *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct shared_ptr<DKDAAPElementCore> {
    struct DKDAAPElementCore *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_0d630658;

typedef struct shared_ptr<MLDDAAPImportItem> {
    struct MLDDAAPImportItem *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_7b646331;

