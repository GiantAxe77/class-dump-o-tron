//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class CLSilo;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AccessPoint {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    int _field3;
    int _field4;
    int _field5;
    double _field6;
    double _field7;
};

struct AssociationState {
    _Bool _field1;
    struct AccessPoint _field2;
};

struct BasicMutex {
    CDUnknownFunctionPointerType *_vptr$Mutex;
    struct MutexInfo *info;
};

struct CLActivityAlarmConcentrator {
    struct BasicMutex _field1;
    struct set<CMActivityAlarm *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarm *>> _field2[12];
};

struct CLApplicationLifecycleManager {
    id _field1;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field2;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field3;
    struct list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch>> _field4;
    _Bool _field5;
};

struct CLBatchedLocations;

struct CLBundleLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    struct __CLClient *_field14;
    struct __CLClient *_field15;
    struct __CLClient *_field16;
    struct __CFString *_field17;
    struct __CFString *_field18;
};

struct CLCollectionRequester {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct weak_ptr<CLCollectionRequester> _field3;
    id _field4;
    struct Listener {
        void *_field1;
        CDUnknownFunctionPointerType _field2;
        CDUnknownFunctionPointerType _field3;
        CDUnknownFunctionPointerType _field4;
    } _field5;
    id _field6;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field7;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field8;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field9;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field10;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field11;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field12;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field13;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field14;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field15;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field16;
    _Bool _field17;
    CDStruct_a2bb4e95 _field18;
    CDStruct_a2bb4e95 _field19;
    id _field20;
    id _field21;
    id _field22;
    id _field23;
    id _field24;
    id _field25;
    id _field26;
    id _field27;
    id _field28;
    id _field29;
    id _field30;
    id _field31;
    id _field32;
    id _field33;
    id _field34;
    id _field35;
    id _field36;
    struct __CFString *_field37;
    struct __CFString *_field38;
    id _field39;
    int _field40;
};

struct CLCompassSessionStatsCollector;

struct CLConnection;

struct CLDaemonClient {
    struct DestructionAwareMutex _field1;
    id _field2;
    id _field3;
    struct Name _field4;
    struct __CFString *_field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    unsigned long long _field10;
    int _field11;
    _Bool _field12;
    id _field13;
    int _field14;
    struct list<std::__1::shared_ptr<CLConnectionMessage>, std::__1::allocator<std::__1::shared_ptr<CLConnectionMessage>>> _field15;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field16;
    unsigned long long _field17;
    struct map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool>>> _field18;
    _Bool _field19;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field20;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field21;
    int _field22;
    _Bool _field23;
    id _field24;
    struct SBSProcessAssertion *_field25;
    int _field26;
    _Bool _field27;
    _Bool _field28;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field29;
    struct unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client>> _field30;
    struct unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client>> _field31;
    struct unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client>> _field32;
    struct unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client>> _field33;
    struct unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client>> _field34;
    struct unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client>> _field35;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field36;
    struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> _field37;
    struct unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client>> _field38;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field39;
    struct unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client>> _field40;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field41;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field42;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field43;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field44;
    struct auto_ptr<CLSidebandOverride> _field45;
    struct unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion>> _field46;
    struct unique_ptr<CLNatalimetryActivityOverride, std::__1::default_delete<CLNatalimetryActivityOverride>> _field47;
    _Bool _field48;
    double _field49;
    _Bool _field50;
    struct Dispatcher *_field51;
    id _field52;
    double _field53;
    struct {
        double _field1;
        double _field2;
        double _field3;
        double _field4;
        double _field5;
        double _field6;
        double _field7;
        double _field8;
        double _field9;
        double _field10;
        int _field11;
    } _field54;
    struct CLNameValuePair _field55;
    struct CLNameValuePair _field56;
    _Bool _field57;
    _Bool _field58;
    _Bool _field59;
    _Bool _field60;
    id _field61;
    int _field62;
    int _field63;
    _Bool _field64;
    _Bool _field65;
    _Bool _field66;
    id _field67;
    struct CLConnection *_field68;
    int _field69;
    int _field70;
    double _field71;
    long long _field72;
    double _field73;
    _Bool _field74;
    struct PauseState _field75;
    _Bool _field76;
    struct map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *>>> _field77;
    _Bool _field78;
    double _field79;
    double _field80;
    double _field81;
    double _field82;
    id _field83;
    struct shared_ptr<CLPersistentTimer> _field84;
    _Bool _field85;
    _Bool _field86;
    _Bool _field87;
    _Bool _field88;
    _Bool _field89;
    struct LocationUpdateSession _field90;
    struct LocationMonitorSession _field91;
    struct MotionTrigger _field92;
    struct CLCompassSessionStatsCollector *_field93;
    struct map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>>> _field94;
    double _field95;
};

struct CLFileDownloadHttp;

struct CLLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
};

struct CLMotionActivity {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    float _field5;
    double _field6;
    int _field7;
    double _field8;
    double _field9;
};

struct CLNameValuePair {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
};

struct CLNatalimetryActivityOverride;

struct CLNetworkLocationRequesterALS {
    CDUnknownFunctionPointerType *_field1;
    struct vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell>> _field2;
    struct vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> _field3;
    struct vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> _field4;
    struct vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell>> _field5;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field6;
    struct Listener {
        void *_field1;
        id _field2;
        CDUnknownFunctionPointerType _field3;
        CDUnknownFunctionPointerType _field4;
        CDUnknownFunctionPointerType _field5;
        CDUnknownFunctionPointerType _field6;
        CDUnknownFunctionPointerType _field7;
        CDUnknownFunctionPointerType _field8;
        CDUnknownFunctionPointerType _field9;
        CDUnknownFunctionPointerType _field10;
        CDUnknownFunctionPointerType _field11;
        CDUnknownFunctionPointerType _field12;
        CDUnknownFunctionPointerType _field13;
        CDUnknownFunctionPointerType _field14;
        CDUnknownFunctionPointerType _field15;
        CDUnknownFunctionPointerType _field16;
        CDUnknownFunctionPointerType _field17;
        CDUnknownFunctionPointerType _field18;
    } _field7;
    int _field8;
    int _field9;
    id _field10;
    id _field11;
    _Bool _field12;
    int _field13;
    struct __CFString *_field14;
    struct __CFString *_field15;
    int _field16;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field17;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field18;
};

struct CLNotifierBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLNotifierClientBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLPersistentStore {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
    id _field3;
    _Bool _field4;
    _Bool _field5;
    double _field6;
    struct __CFRunLoopTimer *_field7;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field8;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field9;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field10;
    int _field11;
};

struct CLPersistentTimer {
    id _field1;
    CDUnknownFunctionPointerType _field2;
    void *_field3;
    id _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
};

struct CLServiceLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    struct __CLClient *_field14;
    struct __CLClient *_field15;
    struct __CLClient *_field16;
    struct __CFString *_field17;
    struct __CFString *_field18;
};

struct CLSidebandOverride;

struct CLSidebandSensorFusion;

struct CLSimulationController {
    struct BasicMutex _field1;
    id _field2;
    struct list<CLClientLocation, std::__1::allocator<CLClientLocation>> _field3;
    _Bool _field4;
    double _field5;
    CDStruct_a2bb4e95 _field6;
    CDStruct_a2bb4e95 _field7;
    CDStruct_a2bb4e95 _field8;
    struct __CFRunLoopTimer *_field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    int _field15;
    int _field16;
    struct __CFURL *_field17;
};

struct CLSqliteCachedStatement {
    struct CLSqliteDatabase *fDb;
    struct sqlite3_stmt *fStatement;
};

struct CLSqliteDatabase;

struct CLStatusBarIconManager {
    struct BasicMutex _field1;
    id _field2;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field3;
    struct unique_ptr<CLGpsController_Type::Client, std::__1::default_delete<CLGpsController_Type::Client>> _field4;
    struct __CFRunLoopTimer *_field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8[5];
    int _field9;
    struct CLNameValuePair _field10;
    double _field11[5][3];
    _Bool _field12;
};

struct CLStepCountEntry {
    double timestamp;
    double startTime;
    unsigned int count;
    double distance;
    unsigned int floorsAscended;
    unsigned int floorsDescended;
    int recordId;
};

struct CLStepCountRecorderDb {
    CDUnknownFunctionPointerType *_vptr$CLActivityRecorderDb;
    struct auto_ptr<CLSqliteDatabase> fDb;
    struct BasicMutex fMutex;
    _Bool fFatalError;
    struct deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> fBuffer;
    int fInternalRecordCount;
    float fSampleInterval;
    struct CLStepCountEntry fPrevEntry;
    int fMaxBufferSize;
    struct CLSqliteCachedStatement fSqlGetCount;
    struct CLSqliteCachedStatement fSqlGetAllAsc;
    struct CLSqliteCachedStatement fSqlGetSinceAsc;
    struct CLSqliteCachedStatement fSqlGetAllDesc;
    struct CLSqliteCachedStatement fSqlDeleteById;
    struct CLSqliteCachedStatement fSqlDeleteAfter;
    struct CLSqliteCachedStatement fSqlDeleteAll;
    struct CLSqliteCachedStatement fSqlInsert;
    struct CLSqliteCachedStatement fSqlShiftStartTimes;
    struct CLSqliteCachedStatement fSqlMostRecent;
    struct CLSqliteCachedStatement fSqlFirstValidEntry;
    struct CLSqliteCachedStatement fSqlLowerBound;
    struct CLSqliteCachedStatement fSqlUpperBound;
    _Bool fResetRequested;
    _Bool fResetFloorsRequested;
    CDUnknownBlockType fFinishedInsertHandler;
    CLSilo *fFinishedInsertSilo;
    unsigned int fPrevStepCount;
    unsigned int fPrevFloorsAscended;
    unsigned int fPrevFloorsDescended;
    int fOffset;
    int fFloorAscendedOffset;
    int fFloorDescendedOffset;
};

struct CLSuggestedActionDatabase;

struct CLTileFileDownloadDetails {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    double _field4;
    int _field5;
    double _field6;
    _Bool _field7;
    _Bool _field8;
};

struct CLTilesManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct map<TileId, CLTileFile *, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTileFile *>>> _field10;
    struct DownloadState _field11;
    struct DownloadState _field12;
    double _field13;
    struct __CFRunLoopTimer *_field14;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field15;
    struct unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client>> _field16;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field17;
    _Bool _field18;
    _Bool _field19;
    double _field20;
    double _field21;
    double _field22;
    struct TileId _field23;
    _Bool _field24;
    _Bool _field25;
    double _field26;
    double _field27;
    struct CLPersistentTimer *_field28;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field29;
    CDStruct_a2bb4e95 _field30;
    double _field31;
    double _field32;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field33;
    int _field34;
    int _field35;
    int _field36;
    _Bool _field37;
    struct WifiServerResponseListener _field38;
    _Bool _field39;
};

struct CLTimeZoneDatabase;

struct CLTimeZoneManager {
    struct CLTimeZoneDatabase *_field1;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field2;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field3;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field4;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field5;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field6;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field7;
    id _field8;
    double _field9;
    double _field10;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field11;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field12;
    double _field13;
    CDStruct_a2bb4e95 _field14;
    CDStruct_a2bb4e95 _field15;
    CDStruct_a2bb4e95 _field16;
    struct CLServiceLocationProvider _field17;
    int _field18;
    int _field19;
    _Bool _field20;
    _Bool _field21;
    struct __CFRunLoopTimer *_field22;
    struct CLPersistentTimer *_field23;
    struct __CFRunLoopTimer *_field24;
    int _field25;
    double _field26;
    struct __CFRunLoopTimer *_field27;
    double _field28;
    double _field29;
    double _field30;
    int _field31;
    double _field32;
    double _field33;
    double _field34;
    double _field35;
    double _field36;
    double _field37;
    double _field38;
    double _field39;
    double _field40;
    _Bool _field41[24];
};

struct CMStrideCalRecorderDb;

struct CdmaCell;

struct Cell;

struct Client;

struct DestructionAwareMutex {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<DestructionAwareMutexInternal> _field2;
};

struct DestructionAwareMutexInternal;

struct Dispatcher;

struct DownloadState {
    char *_field1;
    _Bool _field2;
    double _field3;
    struct CLFileDownloadHttp *_field4;
};

struct LocationMonitorSession {
    struct Metric _field1;
    double _field2;
    double _field3;
    int _field4;
    int _field5;
    _Bool _field6;
};

struct LocationSystemState {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    int _field6;
    _Bool _field7;
    int _field8;
    int _field9;
};

struct LocationUpdateSession {
    struct Metric _field1;
    struct LocationSystemState _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    _Bool _field9;
    int _field10;
};

struct LteCell;

struct Metric {
    _Bool _field1;
    double _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
};

struct MonitoredRegion {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    unsigned short _field3;
    unsigned short _field4;
    int _field5;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field6;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field7;
    int _field8;
};

struct MotionTrigger {
    struct Metric _field1;
    double _field2;
    int _field3;
    int _field4;
    struct map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> _field5;
};

struct MutexInfo;

struct Name {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field4;
    _Bool _field5;
};

struct PauseState {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
};

struct RegInfo {
    double _field1;
    double _field2;
    CDStruct_a2bb4e95 _field3;
    double _field4;
    _Bool _field5;
    _Bool _field6;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field7;
    double _field8;
    int _field9;
    int _field10;
};

struct SBSProcessAssertion;

struct ScdmaCell;

struct TechnologyStatus {
    int _field1;
    _Bool _field2;
};

struct TileId {
    int _field1;
    int _field2;
    int _field3;
    unsigned long long _field4;
};

struct WifiServerResponseListener {
    CDUnknownFunctionPointerType *_field1;
    struct map<TileId, CLTilesManager::WifiServerResponseListenerData, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTilesManager::WifiServerResponseListenerData>>> _field2;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __CFDictionary;

struct __CFRunLoopTimer;

struct __CFString;

struct __CLClient;

struct __list_node<CLApplicationLifecycleManager::PendingLaunch, void *>;

struct __list_node<CLClientLocation, void *>;

struct __list_node<std::__1::shared_ptr<CLConnectionMessage>, void *>;

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct auto_ptr<CLSidebandOverride> {
    struct CLSidebandOverride *_field1;
};

struct auto_ptr<CLSqliteDatabase> {
    struct CLSqliteDatabase *__ptr_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
};

struct deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> {
    struct __split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *>> {
        struct CLStepCountEntry **__first_;
        struct CLStepCountEntry **__begin_;
        struct CLStepCountEntry **__end_;
        struct __compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *>> {
            struct CLStepCountEntry **__first_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry>> {
        unsigned long long __first_;
    } __size_;
};

struct deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int>>> {
    struct __split_buffer<std::__1::pair<double, unsigned int>*, std::__1::allocator<std::__1::pair<double, unsigned int>*>> {
        struct pair<double, unsigned int> **__first_;
        struct pair<double, unsigned int> **__begin_;
        struct pair<double, unsigned int> **__end_;
        struct __compressed_pair<std::__1::pair<double, unsigned int>**, std::__1::allocator<std::__1::pair<double, unsigned int>*>> {
            struct pair<double, unsigned int> **__first_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, unsigned int>>> {
        unsigned long long __first_;
    } __size_;
};

struct list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch>> {
    struct __list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *> {
        struct __list_node<CLApplicationLifecycleManager::PendingLaunch, void *> *_field1;
        struct __list_node<CLApplicationLifecycleManager::PendingLaunch, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLClientLocation, std::__1::allocator<CLClientLocation>> {
    struct __list_node_base<CLClientLocation, void *> {
        struct __list_node<CLClientLocation, void *> *_field1;
        struct __list_node<CLClientLocation, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLClientLocation, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<std::__1::shared_ptr<CLConnectionMessage>, std::__1::allocator<std::__1::shared_ptr<CLConnectionMessage>>> {
    struct __list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *> {
        struct __list_node<std::__1::shared_ptr<CLConnectionMessage>, void *> *_field1;
        struct __list_node<std::__1::shared_ptr<CLConnectionMessage>, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<CLConnectionMessage>, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>>> {
    struct __tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>>> {
        struct __tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *>>> {
    struct __tree<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>>> {
        struct __tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<TileId, CLTileFile *, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTileFile *>>> {
    struct __tree<std::__1::__value_type<TileId, CLTileFile *>, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, CLTileFile *>, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, CLTileFile *>>> {
        struct __tree_node<std::__1::__value_type<TileId, CLTileFile *>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, CLTileFile *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, CLTileFile *>, std::__1::less<TileId>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<TileId, CLTilesManager::WifiServerResponseListenerData, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTilesManager::WifiServerResponseListenerData>>> {
    struct __tree<std::__1::__value_type<TileId, CLTilesManager::WifiServerResponseListenerData>, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, CLTilesManager::WifiServerResponseListenerData>, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, CLTilesManager::WifiServerResponseListenerData>>> {
        struct __tree_node<std::__1::__value_type<TileId, CLTilesManager::WifiServerResponseListenerData>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, CLTilesManager::WifiServerResponseListenerData>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, CLTilesManager::WifiServerResponseListenerData>, std::__1::less<TileId>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<id<CLSignificantVisitManagerClientProtocol>, NSString *, std::__1::less<id<CLSignificantVisitManagerClientProtocol>>, std::__1::allocator<std::__1::pair<const id<CLSignificantVisitManagerClientProtocol>, NSString *>>> {
    struct __tree<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol>>, true>, std::__1::allocator<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>>> {
        struct __tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol>>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> {
        struct __tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *>>> {
    struct __tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *>>> {
        struct __tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int>>> {
        struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int>>> {
    struct __tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int>>> {
        struct __tree_node<std::__1::__value_type<unsigned long, int>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct pair<double, CLMotionActivity::Type>;

struct pair<double, unsigned int>;

struct queue<std::__1::pair<double, unsigned int>, std::__1::deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int>>>> {
    struct deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int>>> c;
};

struct set<CMActivityAlarm *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarm *>> {
    struct __tree<CMActivityAlarm *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarm *>> {
        struct __tree_node<CMActivityAlarm *, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CMActivityAlarm *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, CLActivityAlarmConcentrator::AlarmCompare> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
        struct __tree_node<std::__1::basic_string<char>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char>>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<CLBatchedLocations> {
    struct CLBatchedLocations *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLPersistentTimer> {
    struct CLPersistentTimer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CMStrideCalRecorderDb> {
    struct CMStrideCalRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<DestructionAwareMutexInternal> {
    struct DestructionAwareMutexInternal *_field1;
    struct __shared_weak_count *_field2;
};

struct sqlite3_stmt;

struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> {
    struct __compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client>> {
    struct __compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client>> {
    struct __compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client>> {
    struct __compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client>> {
    struct __compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLBundleLocationProvider_Type::Client, std::__1::default_delete<CLBundleLocationProvider_Type::Client>> {
    struct __compressed_pair<CLBundleLocationProvider_Type::Client *, std::__1::default_delete<CLBundleLocationProvider_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> {
    struct __compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client>> {
    struct __compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> {
    struct __compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> {
    struct __compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> {
    struct __compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client>> {
    struct __compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client>> {
    struct __compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> {
    struct __compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLGpsController_Type::Client, std::__1::default_delete<CLGpsController_Type::Client>> {
    struct __compressed_pair<CLGpsController_Type::Client *, std::__1::default_delete<CLGpsController_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> {
    struct __compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>> {
    struct __compressed_pair<CLLocationProvider_Type::Client *, std::__1::default_delete<CLLocationProvider_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> {
    struct __compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLNatalimetryActivityOverride, std::__1::default_delete<CLNatalimetryActivityOverride>> {
    struct __compressed_pair<CLNatalimetryActivityOverride *, std::__1::default_delete<CLNatalimetryActivityOverride>> {
        struct CLNatalimetryActivityOverride *_field1;
    } _field1;
};

struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> {
    struct __compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> {
    struct __compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client>> {
    struct __compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> {
    struct __compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion>> {
    struct __compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion>> {
        struct CLSidebandSensorFusion *_field1;
    } _field1;
};

struct unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client>> {
    struct __compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> {
    struct __compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLSuggestedActionDatabase, std::__1::default_delete<CLSuggestedActionDatabase>> {
    struct __compressed_pair<CLSuggestedActionDatabase *, std::__1::default_delete<CLSuggestedActionDatabase>> {
        struct CLSuggestedActionDatabase *__first_;
    } __ptr_;
};

struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> {
    struct __compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> {
    struct __compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct vector<CLClientOdometerBuffered, std::__1::allocator<CLClientOdometerBuffered>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<CLClientOdometerBuffered *, std::__1::allocator<CLClientOdometerBuffered>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> {
    struct CdmaCell *_field1;
    struct CdmaCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::CdmaCell *, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> {
        struct CdmaCell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell>> {
    struct Cell *_field1;
    struct Cell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::Cell *, std::__1::allocator<CLTelephonyService_Type::Cell>> {
        struct Cell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell>> {
    struct LteCell *_field1;
    struct LteCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::LteCell *, std::__1::allocator<CLTelephonyService_Type::LteCell>> {
        struct LteCell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> {
    struct ScdmaCell *_field1;
    struct ScdmaCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::ScdmaCell *, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> {
        struct ScdmaCell *_field1;
    } _field3;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field1;
    } _field3;
};

struct vector<std::__1::pair<double, CLMotionActivity::Type>, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type>>> {
    struct pair<double, CLMotionActivity::Type> *__begin_;
    struct pair<double, CLMotionActivity::Type> *__end_;
    struct __compressed_pair<std::__1::pair<double, CLMotionActivity::Type>*, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type>>> {
        struct pair<double, CLMotionActivity::Type> *__first_;
    } __end_cap_;
};

struct weak_ptr<CLCollectionRequester> {
    struct CLCollectionRequester *_field1;
    struct __shared_weak_count *_field2;
};

#if 0
// Names with conflicting types:
typedef struct {
    CDStruct_a2bb4e95 _field1;
    struct {
        double _field1;
        double _field2;
        double _field3;
        double _field4;
        float _field5;
        float _field6;
        float _field7;
        _Bool _field8;
        int _field9;
        CDStruct_c3b9c2ee _field10;
        double _field11;
        int _field12;
        int _field13;
        _Bool _field14;
    } _field2;
    struct shared_ptr<CLBatchedLocations> _field3;
    struct TechnologyStatus _field4;
    _Bool _field5;
    double _field6;
    int _field7;
    CDStruct_c3b9c2ee _field8;
    CDStruct_c3b9c2ee _field9;
    struct vector<CLClientOdometerBuffered, std::__1::allocator<CLClientOdometerBuffered>> _field10;
} NotificationData_edcc4bb6;

typedef struct {
    struct Name _field1;
    _Bool _field2;
    int _field3;
    int _field4;
} NotificationData_f1b66ab6;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    double *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_82f37d05;

typedef struct {
    int *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_95bda58d;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct CDStruct_183601bc;

typedef struct {
    int _field1;
    int _field2;
    CDStruct_c3b9c2ee _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    int _field14;
    double _field15;
    int _field16;
    CDStruct_c3b9c2ee _field17;
    double _field18;
    int _field19;
} CDStruct_a2bb4e95;

// Ambiguous groups
typedef struct {
    unsigned int arfcn:1;
    unsigned int ecn0:1;
    unsigned int psc:1;
    unsigned int rat:1;
    unsigned int rscp:1;
    unsigned int serverHash:1;
    unsigned int transmit:1;
} CDStruct_3769fefd;

typedef struct {
    unsigned int arfcn:1;
    unsigned int psc:1;
} CDStruct_6bbaae90;

