//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSControlTextEditingDelegate.h"
#import "NSWindowDelegate.h"
#import "SimDeviceMenuDelegate.h"

@class DeviceWindow, IndigoSessionController, NSAppleScript, NSButton, NSImageView, NSMenuItem, NSObject<OS_dispatch_queue>, NSScreen, NSScrollView, NSTextField, NSWindow, SimDeviceMenu, SimUIPropertiesViewController, SimulatorGlassView, SimulatorGlassWindow, SimulatorView, SimulatorViewController, StarkConfig, StarkConfigWindowController, TetherConfigController;

@interface GuiController : NSObject <NSControlTextEditingDelegate, NSWindowDelegate, SimDeviceMenuDelegate>
{
    BOOL _inRotation;
    BOOL _wasHidpi;
    BOOL _deviceWindowIsBeingCreated;
    BOOL _haveLoadedWindowOnce;
    BOOL _treatHomeButtonAsDown;
    BOOL _enableMirrorScreens;
    BOOL _mirrorOnly;
    BOOL _mirrorScreenConnected;
    BOOL _mirrorScreenEvents;
    float _rotation;
    float _deviceWindowScale;
    int _deviceWindowType;
    int _starkMouseState;
    SimDeviceMenu *_devicesMenu;
    NSMenuItem *_extrasMenuItem;
    NSMenuItem *_tvExtrasMenuItem;
    NSWindow *_customLocationWindow;
    NSTextField *_customLocationLatitudeField;
    NSTextField *_customLocationLongitudeField;
    NSButton *_customLocationOKButton;
    NSMenuItem *_connectHardwareKeyboardMenuItem;
    NSMenuItem *_toggleSoftwareKeyboardMenuItem;
    IndigoSessionController *_indigoSessionController;
    long long _selectedLocationTag;
    StarkConfigWindowController *_starkConfigWindowController;
    TetherConfigController *_tetherConfig;
    SimulatorViewController *_simulatorViewController;
    SimUIPropertiesViewController *_simulatorViewControllerForResizingWidgets;
    NSScreen *_lastScreen;
    NSWindow *_soundingWindow;
    DeviceWindow *_deviceWindow;
    SimulatorView *_simulatorView;
    SimulatorGlassView *_glassView;
    SimulatorGlassWindow *_glassWindow;
    long long _tvOutMode;
    NSWindow *_tvOutWindow;
    SimulatorViewController *_tvOutSimulatorViewController;
    SimulatorView *_tvOutSimulatorView;
    NSAppleScript *_showProgrammingGuideScript;
    id _tetherObject;
    NSWindow *_mirrorWindow;
    SimulatorView *_mirrorView;
    struct __MTDevice *_mirrorDeviceRef;
    NSScrollView *_deviceWindowScrollView;
    StarkConfig *_starkConfig;
    NSImageView *_starkWheel;
    NSImageView *_starkWheelHighlight;
    NSImageView *_starkWheelArrow;
    NSImageView *_starkPad;
    NSImageView *_starkButton1;
    NSImageView *_starkButtonHighlight1;
    NSImageView *_starkButton2;
    NSImageView *_starkButtonHighlight2;
    NSImageView *_starkSelect;
    NSImageView *_starkSelectHighlight;
    double _starkMouseRadAccumulator;
    double _starkMouseRadPosition;
    double _starkWheelScale;
    NSObject<OS_dispatch_queue> *_eventQueue;
    struct CGSize _recommendedWindowSize;
    struct CGPoint _starkMouseLastDown;
    struct CGPoint _starkWheelDragDelta;
    struct CGAffineTransform _transform;
    struct CGAffineTransform _starkWheelIdentityTransform;
}

+ (id)sharedInstance;
@property NSObject<OS_dispatch_queue> *eventQueue; // @synthesize eventQueue=_eventQueue;
@property int starkMouseState; // @synthesize starkMouseState=_starkMouseState;
@property struct CGPoint starkWheelDragDelta; // @synthesize starkWheelDragDelta=_starkWheelDragDelta;
@property double starkWheelScale; // @synthesize starkWheelScale=_starkWheelScale;
@property double starkMouseRadPosition; // @synthesize starkMouseRadPosition=_starkMouseRadPosition;
@property double starkMouseRadAccumulator; // @synthesize starkMouseRadAccumulator=_starkMouseRadAccumulator;
@property struct CGAffineTransform starkWheelIdentityTransform; // @synthesize starkWheelIdentityTransform=_starkWheelIdentityTransform;
@property struct CGPoint starkMouseLastDown; // @synthesize starkMouseLastDown=_starkMouseLastDown;
@property(retain) NSImageView *starkSelectHighlight; // @synthesize starkSelectHighlight=_starkSelectHighlight;
@property(retain) NSImageView *starkSelect; // @synthesize starkSelect=_starkSelect;
@property(retain) NSImageView *starkButtonHighlight2; // @synthesize starkButtonHighlight2=_starkButtonHighlight2;
@property(retain) NSImageView *starkButton2; // @synthesize starkButton2=_starkButton2;
@property(retain) NSImageView *starkButtonHighlight1; // @synthesize starkButtonHighlight1=_starkButtonHighlight1;
@property(retain) NSImageView *starkButton1; // @synthesize starkButton1=_starkButton1;
@property(retain) NSImageView *starkPad; // @synthesize starkPad=_starkPad;
@property(retain) NSImageView *starkWheelArrow; // @synthesize starkWheelArrow=_starkWheelArrow;
@property(retain) NSImageView *starkWheelHighlight; // @synthesize starkWheelHighlight=_starkWheelHighlight;
@property(retain) NSImageView *starkWheel; // @synthesize starkWheel=_starkWheel;
@property(retain) StarkConfig *starkConfig; // @synthesize starkConfig=_starkConfig;
@property(retain) NSScrollView *deviceWindowScrollView; // @synthesize deviceWindowScrollView=_deviceWindowScrollView;
@property int deviceWindowType; // @synthesize deviceWindowType=_deviceWindowType;
@property(nonatomic) float deviceWindowScale; // @synthesize deviceWindowScale=_deviceWindowScale;
@property struct CGSize recommendedWindowSize; // @synthesize recommendedWindowSize=_recommendedWindowSize;
@property struct __MTDevice *mirrorDeviceRef; // @synthesize mirrorDeviceRef=_mirrorDeviceRef;
@property(retain) SimulatorView *mirrorView; // @synthesize mirrorView=_mirrorView;
@property(retain) NSWindow *mirrorWindow; // @synthesize mirrorWindow=_mirrorWindow;
@property BOOL mirrorScreenEvents; // @synthesize mirrorScreenEvents=_mirrorScreenEvents;
@property BOOL mirrorScreenConnected; // @synthesize mirrorScreenConnected=_mirrorScreenConnected;
@property BOOL mirrorOnly; // @synthesize mirrorOnly=_mirrorOnly;
@property BOOL enableMirrorScreens; // @synthesize enableMirrorScreens=_enableMirrorScreens;
@property(retain) id tetherObject; // @synthesize tetherObject=_tetherObject;
@property BOOL treatHomeButtonAsDown; // @synthesize treatHomeButtonAsDown=_treatHomeButtonAsDown;
@property(retain) NSAppleScript *showProgrammingGuideScript; // @synthesize showProgrammingGuideScript=_showProgrammingGuideScript;
@property BOOL haveLoadedWindowOnce; // @synthesize haveLoadedWindowOnce=_haveLoadedWindowOnce;
@property BOOL deviceWindowIsBeingCreated; // @synthesize deviceWindowIsBeingCreated=_deviceWindowIsBeingCreated;
@property BOOL wasHidpi; // @synthesize wasHidpi=_wasHidpi;
@property BOOL inRotation; // @synthesize inRotation=_inRotation;
@property struct CGAffineTransform transform; // @synthesize transform=_transform;
@property(nonatomic) float rotation; // @synthesize rotation=_rotation;
@property(retain) SimulatorView *tvOutSimulatorView; // @synthesize tvOutSimulatorView=_tvOutSimulatorView;
@property(retain) SimulatorViewController *tvOutSimulatorViewController; // @synthesize tvOutSimulatorViewController=_tvOutSimulatorViewController;
@property(retain) NSWindow *tvOutWindow; // @synthesize tvOutWindow=_tvOutWindow;
@property long long tvOutMode; // @synthesize tvOutMode=_tvOutMode;
@property(retain) SimulatorGlassWindow *glassWindow; // @synthesize glassWindow=_glassWindow;
@property(retain) SimulatorGlassView *glassView; // @synthesize glassView=_glassView;
@property(retain) SimulatorView *simulatorView; // @synthesize simulatorView=_simulatorView;
@property(retain) DeviceWindow *deviceWindow; // @synthesize deviceWindow=_deviceWindow;
@property(retain) NSWindow *soundingWindow; // @synthesize soundingWindow=_soundingWindow;
@property(retain) NSScreen *lastScreen; // @synthesize lastScreen=_lastScreen;
@property(retain) SimUIPropertiesViewController *simulatorViewControllerForResizingWidgets; // @synthesize simulatorViewControllerForResizingWidgets=_simulatorViewControllerForResizingWidgets;
@property(retain) SimulatorViewController *simulatorViewController; // @synthesize simulatorViewController=_simulatorViewController;
@property TetherConfigController *tetherConfig; // @synthesize tetherConfig=_tetherConfig;
@property(retain, nonatomic) StarkConfigWindowController *starkConfigWindowController; // @synthesize starkConfigWindowController=_starkConfigWindowController;
@property long long selectedLocationTag; // @synthesize selectedLocationTag=_selectedLocationTag;
@property(retain) IndigoSessionController *indigoSessionController; // @synthesize indigoSessionController=_indigoSessionController;
@property NSMenuItem *toggleSoftwareKeyboardMenuItem; // @synthesize toggleSoftwareKeyboardMenuItem=_toggleSoftwareKeyboardMenuItem;
@property NSMenuItem *connectHardwareKeyboardMenuItem; // @synthesize connectHardwareKeyboardMenuItem=_connectHardwareKeyboardMenuItem;
@property NSButton *customLocationOKButton; // @synthesize customLocationOKButton=_customLocationOKButton;
@property NSTextField *customLocationLongitudeField; // @synthesize customLocationLongitudeField=_customLocationLongitudeField;
@property NSTextField *customLocationLatitudeField; // @synthesize customLocationLatitudeField=_customLocationLatitudeField;
@property NSWindow *customLocationWindow; // @synthesize customLocationWindow=_customLocationWindow;
@property NSMenuItem *tvExtrasMenuItem; // @synthesize tvExtrasMenuItem=_tvExtrasMenuItem;
@property NSMenuItem *extrasMenuItem; // @synthesize extrasMenuItem=_extrasMenuItem;
@property SimDeviceMenu *devicesMenu; // @synthesize devicesMenu=_devicesMenu;
- (unsigned int)CADebugFlagForMenuItemTag:(long long)arg1;
- (void)rotationTimeout;
- (void)toggleRotationToOrientation:(int)arg1;
- (float)radiansFromOrientation:(int)arg1;
- (int)orientationFromRadians:(float)arg1;
- (BOOL)orientationIsPortraitish;
- (void)updateCustomLocationMode;
- (void)populateLocationMenu;
- (void)updateTetherObject;
- (void)updateMirrorScreens;
- (void)refreshTether:(id)arg1;
- (void)updateScreenInfo:(id)arg1;
- (void)applicationDidResignActive:(id)arg1;
- (void)updateGlassWindow;
- (void)setupGlassWindow;
- (double)starkWheelMaxDrag;
- (void)tvOutMouseDragged:(id)arg1;
- (void)tvOutWheelBumpSend;
- (void)starkWheelAdjust;
- (void)tvOutMouseUp:(id)arg1;
- (void)tvOutMouseDown:(id)arg1;
- (void)tvOutMouseForward:(id)arg1;
- (void)setupTvOutWindow;
- (struct CGSize)sizeForScreen:(unsigned int)arg1;
- (void)resetTvOutWindow;
- (void)updateDeviceWindowLevel;
- (struct CGSize)simulatorViewSize;
- (void)updateWindowTitle;
- (void)windowDidMove:(id)arg1;
- (void)setupDeviceWindow;
- (void)setupWindows;
- (void)loadWindowCenter;
- (void)saveWindowCenter;
- (struct CGPoint)lastWindowCenter;
- (void)cleanupWindows:(BOOL)arg1;
- (void)sendIndigoHIDData:(CDStruct_fd7200cf *)arg1;
- (void)sendPurpleEvent:(struct _PurpleEventMessage *)arg1;
- (void)windowScaleChanged:(id)arg1;
- (void)openSyslog:(id)arg1;
- (void)showMotionControl:(id)arg1;
- (void)recreateWindow;
- (void)windowStayInFrontChanged:(id)arg1;
- (void)showProgrammingGuide:(id)arg1;
- (id)pathToXcode;
- (void)customLocationCancel:(id)arg1;
- (void)customLocationOK:(id)arg1;
- (void)controlTextDidChange:(id)arg1;
- (void)triggerCloudSync:(id)arg1;
- (void)customLocationChanged:(id)arg1;
- (void)toggleCADebugFlag:(id)arg1;
- (void)toggleSlowMotion:(id)arg1;
- (void)toggleSoftwareKeyboard:(id)arg1;
- (void)toggleHardwareKeyboard:(id)arg1;
- (void)toggleKeyboardSync:(id)arg1;
- (void)toggleInCallStatusBar:(id)arg1;
- (void)simulateMemoryWarning:(id)arg1;
- (void)shakeDevice:(id)arg1;
- (void)lockButtonPressed:(id)arg1;
- (void)homeButtonPressHold:(id)arg1;
- (void)homeButtonPressed:(id)arg1;
- (void)homeButtonUp:(id)arg1;
- (void)homeButtonDown:(id)arg1;
- (void)tvOutModeChanged:(id)arg1;
- (void)tvOutModeChangedTo:(long long)arg1;
- (void)inPlaceTvOutModeChangedTo:(long long)arg1 fromSessionThread:(BOOL)arg2;
- (void)resetTvOutSimulatorViewControllerFromSessionThread:(BOOL)arg1;
- (void)purgeModifiers;
- (BOOL)simDeviceSelected:(id)arg1;
- (void)updateWindow;
- (void)menuExtraChanged:(id)arg1;
- (void)animateToRotation:(id)arg1;
- (void)toggleRotationRight:(id)arg1;
- (void)toggleRotationLeft:(id)arg1;
- (void)copyScreen:(id)arg1;
- (void)paste:(id)arg1;
- (void)copy:(id)arg1;
- (void)saveScreenShot:(id)arg1;
- (void)saveScreenShotForViewController:(id)arg1 named:(id)arg2;
- (int)orientation;
- (void)setNonFullsizeRotation;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)monitorScaleMatches:(double)arg1;
- (void)resetContentSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)resetContent:(id)arg1;
- (void)dealloc;
- (void)tvOutClear;
- (unsigned long long)applicationShouldTerminate:(id)arg1;
- (BOOL)applicationShouldHandleReopen:(id)arg1 hasVisibleWindows:(BOOL)arg2;
- (void)writeExtendedDisplaySettingsToPath:(id)arg1;
- (void)awakeFromNib;
- (void)simulatorFatalErrorSheetDidEnd:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)springBoardDidExit;
- (void)springBoardDidLaunch;
- (void)simulatorViewNeedsDisplayOnMainThread:(id)arg1;
- (struct CGRect)tvOutWindowFrame;
- (struct CGRect)tvOutContentFrame;
- (struct CGSize)frameSizeScaledForMonitor:(BOOL)arg1;
- (float)deviceWindowAdditionalDpiScale;
- (double)displayScale;
- (BOOL)hidpiDrawing;
- (BOOL)doubledFrame;
- (BOOL)hidpiMacMonitor;
- (void)fixupGlassWindow;
- (void)fitDeviceWindow;
- (id)deviceWindowScreen;
- (int)desiredDeviceWindowType:(int)arg1;
- (double)scrollerSize;

@end

