//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Argument {
    void *_field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned short _field5;
    unsigned short _field6;
};

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct CoreFunction {
    unsigned int _field1;
    unsigned int _field2;
    unsigned short _field3;
    unsigned short _field4;
    union {
        unsigned long long _field1;
        unsigned long long _field2;
    } _field5;
    struct Argument _field6;
    struct Argument _field7[16];
    unsigned int _field8;
    unsigned int _field9;
    void *_field10;
    void *_field11;
};

struct Function {
    struct CoreFunction _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long *_field4;
    unsigned short _field5;
    unsigned short _field6;
    int _field7;
    void *_field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned long long _field11;
    unsigned long long _field12;
    struct Function *_field13;
    void *_field14;
};

struct TraceContainer {
    struct vector<GPUTools::TraceElement, std::__1::allocator<GPUTools::TraceElement>> v;
    unsigned int count;
};

struct TraceElement;

struct XRGraphPoint {
    unsigned long long _field1;
    float _field2;
    void *_field3;
};

struct XRPathAttribute {
    id _field1;
    id _field2;
    double _field3;
    double *_field4;
    double _field5;
    double _field6;
};

struct XRTimeRange {
    unsigned long long start;
    unsigned long long length;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>;

struct dy_timebase {
    struct mach_timebase_info mach_timebase;
    unsigned long long nanoseconds_since_epoch_timestamp;
    unsigned long long mach_timestamp;
};

struct mach_timebase_info {
    unsigned int numer;
    unsigned int denom;
};

struct override_descriptor;

struct platform_overrides {
    struct override_descriptor *_field1;
    unsigned long long _field2;
    id _field3;
};

struct shared_ptr<std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>> {
    struct vector<unsigned long long, std::__1::allocator<unsigned long long>> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unordered_map<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>>> {
    struct __hash_table<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, std::__1::hash<int>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, GPUTools::objc_wrapper<OGLAAPIStatsSample *>>, std::__1::equal_to<int>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<GPUTools::TraceElement, std::__1::allocator<GPUTools::TraceElement>> {
    struct TraceElement *__begin_;
    struct TraceElement *__end_;
    struct __compressed_pair<GPUTools::TraceElement *, std::__1::allocator<GPUTools::TraceElement>> {
        struct TraceElement *__first_;
    } __end_cap_;
};

struct vector<unsigned long long, std::__1::allocator<unsigned long long>>;

#pragma mark Typedef'd Structures

// Template types
typedef struct shared_ptr<std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>> {
    struct vector<unsigned long long, std::__1::allocator<unsigned long long>> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_97dceaa7;

